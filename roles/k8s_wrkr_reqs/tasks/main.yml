---
- block:
        
   - name: Check if kubelet is running
     shell: "pgrep kubelet"
     register: running_process
     ignore_errors: true
     failed_when: running_process.rc < 1
   - debug:
       msg: "Kubelet is running"
     when: running_process.stdout_lines|length > 0
   - meta: end_host
     when: running_process.stdout_lines|length > 0
  rescue:
      - fail:
          msg: "kubelet not running"
        ignore_errors: "{{ ignore_flag | default(false) | bool }}"
  
- name: time synch...for when restoring from snap
  become: true
  shell: "{{ item }}"
  with_items:    
    - "date -s \"$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z\""
  register: command_output
  
- name: Install ContainerD
  apt:
    name:  containerd
    state: present
    update_cache: true

- name: Install NFS client package
  apt:
    name:  nfs-common
    state: present
    update_cache: true

- name: enable IPv4 forwarding
  shell: |
     sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
     sysctl -p

- name: Create keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Releasekey  
  become: true
  shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --yes"
  register: key
- debug:
     msg:
       - "{{ key.stdout }}"

- name: echo to sources list
  become: true
  shell: "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
  register: list
- debug:
     msg:
       - "{{ list.stdout }}"

- name: Update apt repo and cache on all Debian/Ubuntu boxes
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

- name: Upgrade all packages on servers
  apt: upgrade=dist force_apt_get=yes

- name: Check if a reboot is needed on all servers
  register: reboot_required_file
  stat: path=/var/run/reboot-required

- name: Reboot the box if kernel updated
  reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: reboot_required_file.stat.exists

- name: Install kubeadm, kubelet, and kubectl
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  loop:
    - kubeadm
    - kubelet
    - kubectl

- name: system parameters for K8s initiate
  become: true
  shell: "{{ item }}"
  with_items:
          - "swapoff -a"
          - "sed -e '/swap/ s/^#*/#/' -i /etc/fstab"
          - "systemctl mask swap.target"
          - "sysctl -w net.ipv6.conf.all.disable_ipv6=1"
          - "sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab"
          - "printf '%s\\n' 'overlay' 'br_netfilter' >/etc/modules-load.d/containerd.conf"
          - "modprobe overlay"
          - "modprobe br_netfilter"
          - "printf '%s\\n' 'net.bridge.bridge-nf-call-ip6tables = 1' 'net.bridge.bridge-nf-call-iptables = 1' 'net.ipv4.ip_forward = 1' >/etc/sysctl.d/kubernetes.conf"
          - "sysctl --system"
          - "printf '%s\\n' 'KUBELET_EXTRA_ARGS=\"--cgroup-driver=cgroupfs\"'  >/etc/default/kubelet"
          - "systemctl daemon-reload && sudo systemctl restart kubelet"

  register: key
  #- debug:
  #   msg:
  #     - "{{ key.stdout }}"

#- name: Delete banner file before copy
# file:
#    path: "/etc/issue.net"
#    state: absent

#- name: Create new banner file
#  file:
#      path: "/etc/issue.net"
#      state: touch
      


