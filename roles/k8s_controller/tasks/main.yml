- name: Import vars
  run_once: true
  include_vars:
    file: k8svars.yml
    name: vardata

#################Check if Kubeapi is running and end if so#########
- name: Check if kubeapi is running
  shell: "pgrep kube-apiserver"
  register: running_process
  ignore_errors: true
  #failed_when: running_process.rc < 1
- debug:
    msg: "Kube API is running"
  when: running_process.stdout_lines|length > 0
  ignore_errors: true
- meta: end_host
  when: running_process.stdout_lines|length > 0
  ignore_errors: true

- name: Initialize Kubernetes master
  command: kubeadm init --control-plane-endpoint={{ vardata.nginxlb }} --upload-certs  #--pod-network-cidr={{ vardata.podnetwork }} 
 
  register: kubeadm_output
  ignore_errors: true
- debug:
    msg: "{{ kubeadm_output.stdout }}"

###############kube config file for user#############################

- name: Create .kube directory for the root user
  become: true
  file:
    path: "$HOME/.kube"
    state: directory
    mode: '0755'

- name: Copy admin.conf to user kube config
  become: true
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "$HOME/.kube/config"
    mode: '0644'
    remote_src: yes

- name: Ensure ownership of .kube directory
  become: true
  file:
    path: "$HOME/.kube"
    recurse: true

###################Cilium############################

- name: Download cilium
  ansible.builtin.get_url:
    url: https://github.com/cilium/cilium-cli/releases/download/v0.16.22/cilium-linux-amd64.tar.gz
    dest: /etc/cilium-linux-amd64.tar.gz
    mode: '0440'

- name: Extract cilium.tgz into /usr/local/bin
  ansible.builtin.unarchive:
    src: /etc/cilium-linux-amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes

- name: Remove file (delete file)
  ansible.builtin.file:
    path: /etc/cilium-linux-amd64.tar.gz
    state: absent

- name: install cilium
  become: true
  ignore_errors: true
  shell: "cilium install --set ipam.operator.clusterPoolIPv4PodCIDRList={{ vardata.podnetwork }} --set ipv6.enabled=false"
  register: cilium
- debug:
     msg:
      - "{{ cilium.stdout }}"


###########Create join command#################################
- name: Command for workers to join
  shell: "kubeadm token create --print-join-command > /etc/joincluster"
  register: joincmd
- debug:
     msg:
       - "{{ joincmd.stdout }}"
- set_fact:
     join = "{{ joincmd.stdout }}"   

- name: Read /etc/joincluster into variable (base64)
  ansible.builtin.slurp:
    src: /etc/joincluster
  register: joincluster_raw

- name: Decode joincluster content
  ansible.builtin.set_fact:
    joincluster: "{{ joincluster_raw.content | b64decode }}"

- name: Debug joincluster content
  ansible.builtin.debug:
    msg: "{{ joincluster }}"

- name: Get cert for controller join
  shell: "kubeadm init phase upload-certs --upload-certs > /etc/temp.txt"
  register:  file
- debug:
     msg:
       - "{{ file.stdout }}"
  
- name: Get last line from cert file
  command: "tail -n 1 /etc/temp.txt"
  register: last_line

- name: Write last line to /etc/cert
  copy:
    content: "{{ last_line.stdout }}"
    dest: /etc/cert
    owner: root
    group: root
    mode: '0644'

- name: Read cert file into variable (base64 encoded)
  ansible.builtin.slurp:
    src: /etc/cert
  register: cert_file

- name: Show cert content (decoded)
  debug:
    msg: "{{ cert_file['content'] | b64decode }}"

###########Create joincluster file on ansible host########################################
- name: Create join file
  file:
      path: "/etc/joincluster"
      state: touch
  delegate_to: localhost

- name: add contents to file
  copy:
      dest: "/etc/joincluster"
      content: |
        {{ joincluster }}                        
  delegate_to: localhost

- name: Create controller join file
  file:
      path: "/etc/ctrljoincluster"
      state: touch
  delegate_to: localhost

- name: add contents controller join to file
  copy:
      dest: "/etc/ctrljoincluster"
      content: |
        {{ joincluster }} --control-plane --certificate-key  {{ cert_file['content'] | b64decode }}                       
  delegate_to: localhost

#########kubeconfig to ansible host################################
- name: Read kubeconfig into variable
  become: true
  ansible.builtin.slurp:
    src: "/root/.kube/config"
  register: kubecfg_raw

- name: Decode kubeconfig content
  set_fact:
    kubecfg: "{{ kubecfg_raw['content'] | b64decode }}"

- name: Show kubeconfig
  debug:
    msg: "{{ kubecfg }}"

- name: Create kubecfg file local
  file:
      path: "/etc/kubeconfig"
      state: touch
  delegate_to: localhost

- name: add contents to file
  copy:
      dest: "/etc/kubeconfig"
      content: |
        {{ kubecfg }}                        
  delegate_to: localhost

- name: add master kubeconfig local root
  become: true
  copy:
    content: "{{ kubecfg }}"
    dest: "$HOME/.kube/config"

#END
#############################OLD#################
#- name: Set up kubectl for the current user
#  become: true
#  command: "{{ item }}"
#  with_items:
#      - "sudo mkdir -p $HOME/.kube"
#      - "sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config"
#      # - "sudo chown $(id -u):$(id -g) $HOME/.kube/config"
#      - "sudo chown -R $USER $HOME/.kube"

#- name: read file into var
#  shell: "cat /etc/joincluster"
#  register: joincluster
#- debug:
#    msg:
#     - "{{ joincluster }}"

#- name: Get last line from cert file, actual cert
#  shell: "tail -1 /etc/temp.txt > /etc/cert"
#  register: certs
##- debug:
##     msg:
##       - "{{ certs.stdout }}"
##- set_fact:
##     cert = "{{ certs.stdout }}"

#- name: Set up kubectl for the root user
#  become: true
#  command: "{{ item }}"
#  with_items:
#      - "sudo mkdir -p $HOME/.kube"
#      - "sudo chown -R $USER $HOME/.kube"
